schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  region: String!
}

type Mutation {
  publishHealth(id: ID!): HealthNotification @aws_iam
  publishMatch(queue: String!, sessionId: ID!, players: [PlayerInput!]!): QueueNotification @aws_iam
}

type Subscription {
  healthcheck(id: ID!): HealthNotification @aws_iam @aws_subscribe(mutations: ["publishHealth"])
  joinUnrankedSoloQueue(userId: String!): QueueNotification @aws_subscribe(mutations: ["publishMatch"])
}

type HealthNotification {
  id: ID! @aws_iam
}

union QueueNotification = Match | Heartbeat

type Heartbeat {
  timestamp: String! @aws_iam
}

type Match {
  sessionId: ID! @aws_iam
  queue: String! @aws_iam
  playerIds: [String!]! @aws_iam
  players: [Player!]! @aws_iam
}

type Player {
  userId: String! @aws_iam
  # username: String!
  ip: AWSIPAddress! @aws_iam
}

input PlayerInput {
  userId: String!
  # username: String!
  ip: AWSIPAddress!
}