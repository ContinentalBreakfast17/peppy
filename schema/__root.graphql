schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query @aws_iam {
  region: String!
}

type Mutation @aws_iam {
  publishHealth(id: ID!): HealthNotification
  publishMatch(queue: String!, sessionId: ID!, players: [PlayerInput!]!): QueueNotification
}

type Subscription @aws_iam @aws_lambda {
  healthcheck(id: ID!): HealthNotification @aws_iam @aws_subscribe(mutations: ["publishHealth"])
  joinUnrankedSoloQueue(userId: String!): QueueNotification @aws_subscribe(mutations: ["publishMatch"])
}

type HealthNotification @aws_iam @aws_lambda {
  id: ID!
}

union QueueNotification = Match | Heartbeat

type Heartbeat @aws_iam @aws_lambda {
  timestamp: String!
}

type Match @aws_iam @aws_lambda {
  sessionId: ID!
  queue: String!
  playerIds: [String!]!
  players: [Player!]!
}

type Player @aws_iam @aws_lambda {
  userId: String!
  # username: String!
  ip: AWSIPAddress!
}

input PlayerInput {
  userId: String!
  # username: String!
  ip: AWSIPAddress!
}